# TerminalAI Project Guidelines

## Project Overview
TerminalAI is a full-screen terminal application for chatting with multiple AI providers (ChatGPT, Gemini, and Grok AI) directly from your terminal.

## Architecture Principles
- **Modular Design**: Each provider is in its own file with consistent interface
- **Auto-Import System**: Providers are automatically discovered and loaded
- **Configuration Management**: Centralized config with environment variable support
- **Error Handling**: Graceful error handling with user-friendly messages

## Code Organization
- `src/providers/` - Individual provider implementations
- `src/config/` - Configuration management
- `src/ui/` - User interface components
- `src/setup/` - Setup and initialization logic
- `bin/` - CLI executable
- `.cursor/rules/` - Cursor rules for project guidance

## Provider Development
When adding new providers:
1. Create new provider file in `src/providers/`
2. Implement consistent interface methods
3. Update configuration system
4. Add to documentation
5. Update CLI arguments
6. Bump version appropriately

## Version Management
- **Patch (1.6.1)**: Bug fixes, docs, small improvements
- **Minor (1.7.0)**: New features, providers, significant changes
- **Major (2.0.0)**: Breaking changes, rewrites

## Development Workflow
1. Make changes following modular principles
2. Test with multiple providers
3. Update documentation
4. Bump version and update changelog
5. Commit with descriptive messages

## Key Files
- `package.json` - Project configuration and dependencies
- `bin/terminal-ai.js` - CLI entry point
- `src/providers/providers.js` - Auto-import system
- `src/config/config.js` - Configuration management
- `README.md` - User documentation
- `CHANGELOG.md` - Version history
